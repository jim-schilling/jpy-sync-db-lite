[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "jpy-sync-db-lite"
version = "0.2.0"
description = "Jim's Python - Synchronous Database Wrapper for SQLite"
readme = "README.md"
license = "MIT"
authors = [
    {name = "Jim Schilling"}
]
maintainers = [
    {name = "Jim Schilling"}
]
keywords = ["sqlite", "database", "synchronous", "threading", "sqlalchemy"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.10"
dependencies = [
    "sqlalchemy>=2.0.37",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/jimschilling/jpy-sync-db-lite"
Repository = "https://github.com/jimschilling/jpy-sync-db-lite.git"
Documentation = "https://github.com/jimschilling/jpy-sync-db-lite#readme"
"Bug Tracker" = "https://github.com/jimschilling/jpy-sync-db-lite/issues"

[project.scripts]
jpy-sync-db-lite = "jpy_sync_db_lite.__main__:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["jpy_sync_db_lite*"]

[tool.setuptools.package-data]
"jpy_sync_db_lite" = ["*.pyi", "py.typed"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=jpy_sync_db_lite",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["jpy_sync_db_lite"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 